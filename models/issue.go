// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Issue issue
//
// swagger:model Issue
type Issue struct {

	// description
	// Required: true
	Description *string `json:"description"`

	// handler
	Handler *AccountRef `json:"handler,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// reporter
	Reporter *AccountRef `json:"reporter,omitempty"`

	// summary
	// Required: true
	Summary *string `json:"summary"`
}

// Validate validates this issue
func (m *Issue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHandler(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReporter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSummary(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Issue) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *Issue) validateHandler(formats strfmt.Registry) error {
	if swag.IsZero(m.Handler) { // not required
		return nil
	}

	if m.Handler != nil {
		if err := m.Handler.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("handler")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("handler")
			}
			return err
		}
	}

	return nil
}

func (m *Issue) validateReporter(formats strfmt.Registry) error {
	if swag.IsZero(m.Reporter) { // not required
		return nil
	}

	if m.Reporter != nil {
		if err := m.Reporter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reporter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reporter")
			}
			return err
		}
	}

	return nil
}

func (m *Issue) validateSummary(formats strfmt.Registry) error {

	if err := validate.Required("summary", "body", m.Summary); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this issue based on the context it is used
func (m *Issue) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHandler(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReporter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Issue) contextValidateHandler(ctx context.Context, formats strfmt.Registry) error {

	if m.Handler != nil {

		if swag.IsZero(m.Handler) { // not required
			return nil
		}

		if err := m.Handler.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("handler")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("handler")
			}
			return err
		}
	}

	return nil
}

func (m *Issue) contextValidateReporter(ctx context.Context, formats strfmt.Registry) error {

	if m.Reporter != nil {

		if swag.IsZero(m.Reporter) { // not required
			return nil
		}

		if err := m.Reporter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reporter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reporter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Issue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Issue) UnmarshalBinary(b []byte) error {
	var res Issue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
