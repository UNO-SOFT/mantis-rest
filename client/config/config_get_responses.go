// Code generated by go-swagger; DO NOT EDIT.

package config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/UNO-SOFT/mantis-rest/models"
)

// ConfigGetReader is a Reader for the ConfigGet structure.
type ConfigGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ConfigGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewConfigGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewConfigGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewConfigGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewConfigGetServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewConfigGetOK creates a ConfigGetOK with default headers values
func NewConfigGetOK() *ConfigGetOK {
	return &ConfigGetOK{}
}

/*
ConfigGetOK describes a response with status code 200, with default header values.

Success
*/
type ConfigGetOK struct {
	Payload *models.ConfigGetResponse
}

// IsSuccess returns true when this config get o k response has a 2xx status code
func (o *ConfigGetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this config get o k response has a 3xx status code
func (o *ConfigGetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this config get o k response has a 4xx status code
func (o *ConfigGetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this config get o k response has a 5xx status code
func (o *ConfigGetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this config get o k response a status code equal to that given
func (o *ConfigGetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the config get o k response
func (o *ConfigGetOK) Code() int {
	return 200
}

func (o *ConfigGetOK) Error() string {
	return fmt.Sprintf("[GET /config][%d] configGetOK  %+v", 200, o.Payload)
}

func (o *ConfigGetOK) String() string {
	return fmt.Sprintf("[GET /config][%d] configGetOK  %+v", 200, o.Payload)
}

func (o *ConfigGetOK) GetPayload() *models.ConfigGetResponse {
	return o.Payload
}

func (o *ConfigGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConfigGetResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfigGetForbidden creates a ConfigGetForbidden with default headers values
func NewConfigGetForbidden() *ConfigGetForbidden {
	return &ConfigGetForbidden{}
}

/*
ConfigGetForbidden describes a response with status code 403, with default header values.

Access denied
*/
type ConfigGetForbidden struct {
}

// IsSuccess returns true when this config get forbidden response has a 2xx status code
func (o *ConfigGetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this config get forbidden response has a 3xx status code
func (o *ConfigGetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this config get forbidden response has a 4xx status code
func (o *ConfigGetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this config get forbidden response has a 5xx status code
func (o *ConfigGetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this config get forbidden response a status code equal to that given
func (o *ConfigGetForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the config get forbidden response
func (o *ConfigGetForbidden) Code() int {
	return 403
}

func (o *ConfigGetForbidden) Error() string {
	return fmt.Sprintf("[GET /config][%d] configGetForbidden ", 403)
}

func (o *ConfigGetForbidden) String() string {
	return fmt.Sprintf("[GET /config][%d] configGetForbidden ", 403)
}

func (o *ConfigGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewConfigGetNotFound creates a ConfigGetNotFound with default headers values
func NewConfigGetNotFound() *ConfigGetNotFound {
	return &ConfigGetNotFound{}
}

/*
ConfigGetNotFound describes a response with status code 404, with default header values.

User or Project not found
*/
type ConfigGetNotFound struct {
}

// IsSuccess returns true when this config get not found response has a 2xx status code
func (o *ConfigGetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this config get not found response has a 3xx status code
func (o *ConfigGetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this config get not found response has a 4xx status code
func (o *ConfigGetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this config get not found response has a 5xx status code
func (o *ConfigGetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this config get not found response a status code equal to that given
func (o *ConfigGetNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the config get not found response
func (o *ConfigGetNotFound) Code() int {
	return 404
}

func (o *ConfigGetNotFound) Error() string {
	return fmt.Sprintf("[GET /config][%d] configGetNotFound ", 404)
}

func (o *ConfigGetNotFound) String() string {
	return fmt.Sprintf("[GET /config][%d] configGetNotFound ", 404)
}

func (o *ConfigGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewConfigGetServiceUnavailable creates a ConfigGetServiceUnavailable with default headers values
func NewConfigGetServiceUnavailable() *ConfigGetServiceUnavailable {
	return &ConfigGetServiceUnavailable{}
}

/*
ConfigGetServiceUnavailable describes a response with status code 503, with default header values.

Mantis Offline
*/
type ConfigGetServiceUnavailable struct {
}

// IsSuccess returns true when this config get service unavailable response has a 2xx status code
func (o *ConfigGetServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this config get service unavailable response has a 3xx status code
func (o *ConfigGetServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this config get service unavailable response has a 4xx status code
func (o *ConfigGetServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this config get service unavailable response has a 5xx status code
func (o *ConfigGetServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this config get service unavailable response a status code equal to that given
func (o *ConfigGetServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the config get service unavailable response
func (o *ConfigGetServiceUnavailable) Code() int {
	return 503
}

func (o *ConfigGetServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /config][%d] configGetServiceUnavailable ", 503)
}

func (o *ConfigGetServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /config][%d] configGetServiceUnavailable ", 503)
}

func (o *ConfigGetServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
