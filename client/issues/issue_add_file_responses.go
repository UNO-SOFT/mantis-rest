// Code generated by go-swagger; DO NOT EDIT.

package issues

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// IssueAddFileReader is a Reader for the IssueAddFile structure.
type IssueAddFileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IssueAddFileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewIssueAddFileCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewIssueAddFileForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewIssueAddFileServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /issues/:id/files] issueAddFile", response, response.Code())
	}
}

// NewIssueAddFileCreated creates a IssueAddFileCreated with default headers values
func NewIssueAddFileCreated() *IssueAddFileCreated {
	return &IssueAddFileCreated{}
}

/*
IssueAddFileCreated describes a response with status code 201, with default header values.

File successfully attached
*/
type IssueAddFileCreated struct {
}

// IsSuccess returns true when this issue add file created response has a 2xx status code
func (o *IssueAddFileCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this issue add file created response has a 3xx status code
func (o *IssueAddFileCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue add file created response has a 4xx status code
func (o *IssueAddFileCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this issue add file created response has a 5xx status code
func (o *IssueAddFileCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this issue add file created response a status code equal to that given
func (o *IssueAddFileCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the issue add file created response
func (o *IssueAddFileCreated) Code() int {
	return 201
}

func (o *IssueAddFileCreated) Error() string {
	return fmt.Sprintf("[POST /issues/:id/files][%d] issueAddFileCreated ", 201)
}

func (o *IssueAddFileCreated) String() string {
	return fmt.Sprintf("[POST /issues/:id/files][%d] issueAddFileCreated ", 201)
}

func (o *IssueAddFileCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewIssueAddFileForbidden creates a IssueAddFileForbidden with default headers values
func NewIssueAddFileForbidden() *IssueAddFileForbidden {
	return &IssueAddFileForbidden{}
}

/*
IssueAddFileForbidden describes a response with status code 403, with default header values.

Access denied
*/
type IssueAddFileForbidden struct {
}

// IsSuccess returns true when this issue add file forbidden response has a 2xx status code
func (o *IssueAddFileForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this issue add file forbidden response has a 3xx status code
func (o *IssueAddFileForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue add file forbidden response has a 4xx status code
func (o *IssueAddFileForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this issue add file forbidden response has a 5xx status code
func (o *IssueAddFileForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this issue add file forbidden response a status code equal to that given
func (o *IssueAddFileForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the issue add file forbidden response
func (o *IssueAddFileForbidden) Code() int {
	return 403
}

func (o *IssueAddFileForbidden) Error() string {
	return fmt.Sprintf("[POST /issues/:id/files][%d] issueAddFileForbidden ", 403)
}

func (o *IssueAddFileForbidden) String() string {
	return fmt.Sprintf("[POST /issues/:id/files][%d] issueAddFileForbidden ", 403)
}

func (o *IssueAddFileForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewIssueAddFileServiceUnavailable creates a IssueAddFileServiceUnavailable with default headers values
func NewIssueAddFileServiceUnavailable() *IssueAddFileServiceUnavailable {
	return &IssueAddFileServiceUnavailable{}
}

/*
IssueAddFileServiceUnavailable describes a response with status code 503, with default header values.

Mantis Offline
*/
type IssueAddFileServiceUnavailable struct {
}

// IsSuccess returns true when this issue add file service unavailable response has a 2xx status code
func (o *IssueAddFileServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this issue add file service unavailable response has a 3xx status code
func (o *IssueAddFileServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue add file service unavailable response has a 4xx status code
func (o *IssueAddFileServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this issue add file service unavailable response has a 5xx status code
func (o *IssueAddFileServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this issue add file service unavailable response a status code equal to that given
func (o *IssueAddFileServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the issue add file service unavailable response
func (o *IssueAddFileServiceUnavailable) Code() int {
	return 503
}

func (o *IssueAddFileServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /issues/:id/files][%d] issueAddFileServiceUnavailable ", 503)
}

func (o *IssueAddFileServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /issues/:id/files][%d] issueAddFileServiceUnavailable ", 503)
}

func (o *IssueAddFileServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
