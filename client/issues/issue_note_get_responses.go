// Code generated by go-swagger; DO NOT EDIT.

package issues

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/UNO-SOFT/mantis-rest/models"
)

// IssueNoteGetReader is a Reader for the IssueNoteGet structure.
type IssueNoteGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IssueNoteGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIssueNoteGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewIssueNoteGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewIssueNoteGetServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /issues/:id/notes] issueNoteGet", response, response.Code())
	}
}

// NewIssueNoteGetOK creates a IssueNoteGetOK with default headers values
func NewIssueNoteGetOK() *IssueNoteGetOK {
	return &IssueNoteGetOK{}
}

/*
IssueNoteGetOK describes a response with status code 200, with default header values.

Success with note details
*/
type IssueNoteGetOK struct {
	Payload *models.Note
}

// IsSuccess returns true when this issue note get o k response has a 2xx status code
func (o *IssueNoteGetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this issue note get o k response has a 3xx status code
func (o *IssueNoteGetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue note get o k response has a 4xx status code
func (o *IssueNoteGetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this issue note get o k response has a 5xx status code
func (o *IssueNoteGetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this issue note get o k response a status code equal to that given
func (o *IssueNoteGetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the issue note get o k response
func (o *IssueNoteGetOK) Code() int {
	return 200
}

func (o *IssueNoteGetOK) Error() string {
	return fmt.Sprintf("[GET /issues/:id/notes][%d] issueNoteGetOK  %+v", 200, o.Payload)
}

func (o *IssueNoteGetOK) String() string {
	return fmt.Sprintf("[GET /issues/:id/notes][%d] issueNoteGetOK  %+v", 200, o.Payload)
}

func (o *IssueNoteGetOK) GetPayload() *models.Note {
	return o.Payload
}

func (o *IssueNoteGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Note)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIssueNoteGetForbidden creates a IssueNoteGetForbidden with default headers values
func NewIssueNoteGetForbidden() *IssueNoteGetForbidden {
	return &IssueNoteGetForbidden{}
}

/*
IssueNoteGetForbidden describes a response with status code 403, with default header values.

Access denied
*/
type IssueNoteGetForbidden struct {
}

// IsSuccess returns true when this issue note get forbidden response has a 2xx status code
func (o *IssueNoteGetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this issue note get forbidden response has a 3xx status code
func (o *IssueNoteGetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue note get forbidden response has a 4xx status code
func (o *IssueNoteGetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this issue note get forbidden response has a 5xx status code
func (o *IssueNoteGetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this issue note get forbidden response a status code equal to that given
func (o *IssueNoteGetForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the issue note get forbidden response
func (o *IssueNoteGetForbidden) Code() int {
	return 403
}

func (o *IssueNoteGetForbidden) Error() string {
	return fmt.Sprintf("[GET /issues/:id/notes][%d] issueNoteGetForbidden ", 403)
}

func (o *IssueNoteGetForbidden) String() string {
	return fmt.Sprintf("[GET /issues/:id/notes][%d] issueNoteGetForbidden ", 403)
}

func (o *IssueNoteGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewIssueNoteGetServiceUnavailable creates a IssueNoteGetServiceUnavailable with default headers values
func NewIssueNoteGetServiceUnavailable() *IssueNoteGetServiceUnavailable {
	return &IssueNoteGetServiceUnavailable{}
}

/*
IssueNoteGetServiceUnavailable describes a response with status code 503, with default header values.

Mantis Offline
*/
type IssueNoteGetServiceUnavailable struct {
}

// IsSuccess returns true when this issue note get service unavailable response has a 2xx status code
func (o *IssueNoteGetServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this issue note get service unavailable response has a 3xx status code
func (o *IssueNoteGetServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue note get service unavailable response has a 4xx status code
func (o *IssueNoteGetServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this issue note get service unavailable response has a 5xx status code
func (o *IssueNoteGetServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this issue note get service unavailable response a status code equal to that given
func (o *IssueNoteGetServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the issue note get service unavailable response
func (o *IssueNoteGetServiceUnavailable) Code() int {
	return 503
}

func (o *IssueNoteGetServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /issues/:id/notes][%d] issueNoteGetServiceUnavailable ", 503)
}

func (o *IssueNoteGetServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /issues/:id/notes][%d] issueNoteGetServiceUnavailable ", 503)
}

func (o *IssueNoteGetServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
