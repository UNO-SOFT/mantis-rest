// Code generated by go-swagger; DO NOT EDIT.

package issues

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// IssueNoteAddReader is a Reader for the IssueNoteAdd structure.
type IssueNoteAddReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IssueNoteAddReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewIssueNoteAddCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewIssueNoteAddForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewIssueNoteAddServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /issues/:id/notes] issueNoteAdd", response, response.Code())
	}
}

// NewIssueNoteAddCreated creates a IssueNoteAddCreated with default headers values
func NewIssueNoteAddCreated() *IssueNoteAddCreated {
	return &IssueNoteAddCreated{}
}

/*
IssueNoteAddCreated describes a response with status code 201, with default header values.

Note successfully created
*/
type IssueNoteAddCreated struct {
}

// IsSuccess returns true when this issue note add created response has a 2xx status code
func (o *IssueNoteAddCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this issue note add created response has a 3xx status code
func (o *IssueNoteAddCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue note add created response has a 4xx status code
func (o *IssueNoteAddCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this issue note add created response has a 5xx status code
func (o *IssueNoteAddCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this issue note add created response a status code equal to that given
func (o *IssueNoteAddCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the issue note add created response
func (o *IssueNoteAddCreated) Code() int {
	return 201
}

func (o *IssueNoteAddCreated) Error() string {
	return fmt.Sprintf("[POST /issues/:id/notes][%d] issueNoteAddCreated ", 201)
}

func (o *IssueNoteAddCreated) String() string {
	return fmt.Sprintf("[POST /issues/:id/notes][%d] issueNoteAddCreated ", 201)
}

func (o *IssueNoteAddCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewIssueNoteAddForbidden creates a IssueNoteAddForbidden with default headers values
func NewIssueNoteAddForbidden() *IssueNoteAddForbidden {
	return &IssueNoteAddForbidden{}
}

/*
IssueNoteAddForbidden describes a response with status code 403, with default header values.

Access denied
*/
type IssueNoteAddForbidden struct {
}

// IsSuccess returns true when this issue note add forbidden response has a 2xx status code
func (o *IssueNoteAddForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this issue note add forbidden response has a 3xx status code
func (o *IssueNoteAddForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue note add forbidden response has a 4xx status code
func (o *IssueNoteAddForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this issue note add forbidden response has a 5xx status code
func (o *IssueNoteAddForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this issue note add forbidden response a status code equal to that given
func (o *IssueNoteAddForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the issue note add forbidden response
func (o *IssueNoteAddForbidden) Code() int {
	return 403
}

func (o *IssueNoteAddForbidden) Error() string {
	return fmt.Sprintf("[POST /issues/:id/notes][%d] issueNoteAddForbidden ", 403)
}

func (o *IssueNoteAddForbidden) String() string {
	return fmt.Sprintf("[POST /issues/:id/notes][%d] issueNoteAddForbidden ", 403)
}

func (o *IssueNoteAddForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewIssueNoteAddServiceUnavailable creates a IssueNoteAddServiceUnavailable with default headers values
func NewIssueNoteAddServiceUnavailable() *IssueNoteAddServiceUnavailable {
	return &IssueNoteAddServiceUnavailable{}
}

/*
IssueNoteAddServiceUnavailable describes a response with status code 503, with default header values.

Mantis Offline
*/
type IssueNoteAddServiceUnavailable struct {
}

// IsSuccess returns true when this issue note add service unavailable response has a 2xx status code
func (o *IssueNoteAddServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this issue note add service unavailable response has a 3xx status code
func (o *IssueNoteAddServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue note add service unavailable response has a 4xx status code
func (o *IssueNoteAddServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this issue note add service unavailable response has a 5xx status code
func (o *IssueNoteAddServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this issue note add service unavailable response a status code equal to that given
func (o *IssueNoteAddServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the issue note add service unavailable response
func (o *IssueNoteAddServiceUnavailable) Code() int {
	return 503
}

func (o *IssueNoteAddServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /issues/:id/notes][%d] issueNoteAddServiceUnavailable ", 503)
}

func (o *IssueNoteAddServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /issues/:id/notes][%d] issueNoteAddServiceUnavailable ", 503)
}

func (o *IssueNoteAddServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
