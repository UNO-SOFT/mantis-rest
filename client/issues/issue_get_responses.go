// Code generated by go-swagger; DO NOT EDIT.

package issues

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/UNO-SOFT/mantis-rest/models"
)

// IssueGetReader is a Reader for the IssueGet structure.
type IssueGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IssueGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIssueGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewIssueGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewIssueGetServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewIssueGetOK creates a IssueGetOK with default headers values
func NewIssueGetOK() *IssueGetOK {
	return &IssueGetOK{}
}

/*
IssueGetOK describes a response with status code 200, with default header values.

Success with issue details
*/
type IssueGetOK struct {
	Payload *models.CreateIssueResponse
}

// IsSuccess returns true when this issue get o k response has a 2xx status code
func (o *IssueGetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this issue get o k response has a 3xx status code
func (o *IssueGetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue get o k response has a 4xx status code
func (o *IssueGetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this issue get o k response has a 5xx status code
func (o *IssueGetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this issue get o k response a status code equal to that given
func (o *IssueGetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the issue get o k response
func (o *IssueGetOK) Code() int {
	return 200
}

func (o *IssueGetOK) Error() string {
	return fmt.Sprintf("[GET /issues][%d] issueGetOK  %+v", 200, o.Payload)
}

func (o *IssueGetOK) String() string {
	return fmt.Sprintf("[GET /issues][%d] issueGetOK  %+v", 200, o.Payload)
}

func (o *IssueGetOK) GetPayload() *models.CreateIssueResponse {
	return o.Payload
}

func (o *IssueGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CreateIssueResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIssueGetForbidden creates a IssueGetForbidden with default headers values
func NewIssueGetForbidden() *IssueGetForbidden {
	return &IssueGetForbidden{}
}

/*
IssueGetForbidden describes a response with status code 403, with default header values.

Access denied
*/
type IssueGetForbidden struct {
}

// IsSuccess returns true when this issue get forbidden response has a 2xx status code
func (o *IssueGetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this issue get forbidden response has a 3xx status code
func (o *IssueGetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue get forbidden response has a 4xx status code
func (o *IssueGetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this issue get forbidden response has a 5xx status code
func (o *IssueGetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this issue get forbidden response a status code equal to that given
func (o *IssueGetForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the issue get forbidden response
func (o *IssueGetForbidden) Code() int {
	return 403
}

func (o *IssueGetForbidden) Error() string {
	return fmt.Sprintf("[GET /issues][%d] issueGetForbidden ", 403)
}

func (o *IssueGetForbidden) String() string {
	return fmt.Sprintf("[GET /issues][%d] issueGetForbidden ", 403)
}

func (o *IssueGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewIssueGetServiceUnavailable creates a IssueGetServiceUnavailable with default headers values
func NewIssueGetServiceUnavailable() *IssueGetServiceUnavailable {
	return &IssueGetServiceUnavailable{}
}

/*
IssueGetServiceUnavailable describes a response with status code 503, with default header values.

Mantis Offline
*/
type IssueGetServiceUnavailable struct {
}

// IsSuccess returns true when this issue get service unavailable response has a 2xx status code
func (o *IssueGetServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this issue get service unavailable response has a 3xx status code
func (o *IssueGetServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue get service unavailable response has a 4xx status code
func (o *IssueGetServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this issue get service unavailable response has a 5xx status code
func (o *IssueGetServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this issue get service unavailable response a status code equal to that given
func (o *IssueGetServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the issue get service unavailable response
func (o *IssueGetServiceUnavailable) Code() int {
	return 503
}

func (o *IssueGetServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /issues][%d] issueGetServiceUnavailable ", 503)
}

func (o *IssueGetServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /issues][%d] issueGetServiceUnavailable ", 503)
}

func (o *IssueGetServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
