// Code generated by go-swagger; DO NOT EDIT.

package issues

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/UNO-SOFT/mantis-rest/models"
)

// IssueFileGetReader is a Reader for the IssueFileGet structure.
type IssueFileGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IssueFileGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIssueFileGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewIssueFileGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewIssueFileGetServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /issues/:id/files] issueFileGet", response, response.Code())
	}
}

// NewIssueFileGetOK creates a IssueFileGetOK with default headers values
func NewIssueFileGetOK() *IssueFileGetOK {
	return &IssueFileGetOK{}
}

/*
IssueFileGetOK describes a response with status code 200, with default header values.

Success with file details
*/
type IssueFileGetOK struct {
	Payload *models.FileRef
}

// IsSuccess returns true when this issue file get o k response has a 2xx status code
func (o *IssueFileGetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this issue file get o k response has a 3xx status code
func (o *IssueFileGetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue file get o k response has a 4xx status code
func (o *IssueFileGetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this issue file get o k response has a 5xx status code
func (o *IssueFileGetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this issue file get o k response a status code equal to that given
func (o *IssueFileGetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the issue file get o k response
func (o *IssueFileGetOK) Code() int {
	return 200
}

func (o *IssueFileGetOK) Error() string {
	return fmt.Sprintf("[GET /issues/:id/files][%d] issueFileGetOK  %+v", 200, o.Payload)
}

func (o *IssueFileGetOK) String() string {
	return fmt.Sprintf("[GET /issues/:id/files][%d] issueFileGetOK  %+v", 200, o.Payload)
}

func (o *IssueFileGetOK) GetPayload() *models.FileRef {
	return o.Payload
}

func (o *IssueFileGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FileRef)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIssueFileGetForbidden creates a IssueFileGetForbidden with default headers values
func NewIssueFileGetForbidden() *IssueFileGetForbidden {
	return &IssueFileGetForbidden{}
}

/*
IssueFileGetForbidden describes a response with status code 403, with default header values.

Access denied
*/
type IssueFileGetForbidden struct {
}

// IsSuccess returns true when this issue file get forbidden response has a 2xx status code
func (o *IssueFileGetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this issue file get forbidden response has a 3xx status code
func (o *IssueFileGetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue file get forbidden response has a 4xx status code
func (o *IssueFileGetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this issue file get forbidden response has a 5xx status code
func (o *IssueFileGetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this issue file get forbidden response a status code equal to that given
func (o *IssueFileGetForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the issue file get forbidden response
func (o *IssueFileGetForbidden) Code() int {
	return 403
}

func (o *IssueFileGetForbidden) Error() string {
	return fmt.Sprintf("[GET /issues/:id/files][%d] issueFileGetForbidden ", 403)
}

func (o *IssueFileGetForbidden) String() string {
	return fmt.Sprintf("[GET /issues/:id/files][%d] issueFileGetForbidden ", 403)
}

func (o *IssueFileGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewIssueFileGetServiceUnavailable creates a IssueFileGetServiceUnavailable with default headers values
func NewIssueFileGetServiceUnavailable() *IssueFileGetServiceUnavailable {
	return &IssueFileGetServiceUnavailable{}
}

/*
IssueFileGetServiceUnavailable describes a response with status code 503, with default header values.

Mantis Offline
*/
type IssueFileGetServiceUnavailable struct {
}

// IsSuccess returns true when this issue file get service unavailable response has a 2xx status code
func (o *IssueFileGetServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this issue file get service unavailable response has a 3xx status code
func (o *IssueFileGetServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue file get service unavailable response has a 4xx status code
func (o *IssueFileGetServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this issue file get service unavailable response has a 5xx status code
func (o *IssueFileGetServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this issue file get service unavailable response a status code equal to that given
func (o *IssueFileGetServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the issue file get service unavailable response
func (o *IssueFileGetServiceUnavailable) Code() int {
	return 503
}

func (o *IssueFileGetServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /issues/:id/files][%d] issueFileGetServiceUnavailable ", 503)
}

func (o *IssueFileGetServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /issues/:id/files][%d] issueFileGetServiceUnavailable ", 503)
}

func (o *IssueFileGetServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
