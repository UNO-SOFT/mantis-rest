// Code generated by go-swagger; DO NOT EDIT.

package issues

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// IssueAddReader is a Reader for the IssueAdd structure.
type IssueAddReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IssueAddReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewIssueAddCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewIssueAddForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewIssueAddServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /issues] issueAdd", response, response.Code())
	}
}

// NewIssueAddCreated creates a IssueAddCreated with default headers values
func NewIssueAddCreated() *IssueAddCreated {
	return &IssueAddCreated{}
}

/*
IssueAddCreated describes a response with status code 201, with default header values.

Issue successfully created
*/
type IssueAddCreated struct {
}

// IsSuccess returns true when this issue add created response has a 2xx status code
func (o *IssueAddCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this issue add created response has a 3xx status code
func (o *IssueAddCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue add created response has a 4xx status code
func (o *IssueAddCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this issue add created response has a 5xx status code
func (o *IssueAddCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this issue add created response a status code equal to that given
func (o *IssueAddCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the issue add created response
func (o *IssueAddCreated) Code() int {
	return 201
}

func (o *IssueAddCreated) Error() string {
	return fmt.Sprintf("[POST /issues][%d] issueAddCreated ", 201)
}

func (o *IssueAddCreated) String() string {
	return fmt.Sprintf("[POST /issues][%d] issueAddCreated ", 201)
}

func (o *IssueAddCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewIssueAddForbidden creates a IssueAddForbidden with default headers values
func NewIssueAddForbidden() *IssueAddForbidden {
	return &IssueAddForbidden{}
}

/*
IssueAddForbidden describes a response with status code 403, with default header values.

Access denied
*/
type IssueAddForbidden struct {
}

// IsSuccess returns true when this issue add forbidden response has a 2xx status code
func (o *IssueAddForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this issue add forbidden response has a 3xx status code
func (o *IssueAddForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue add forbidden response has a 4xx status code
func (o *IssueAddForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this issue add forbidden response has a 5xx status code
func (o *IssueAddForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this issue add forbidden response a status code equal to that given
func (o *IssueAddForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the issue add forbidden response
func (o *IssueAddForbidden) Code() int {
	return 403
}

func (o *IssueAddForbidden) Error() string {
	return fmt.Sprintf("[POST /issues][%d] issueAddForbidden ", 403)
}

func (o *IssueAddForbidden) String() string {
	return fmt.Sprintf("[POST /issues][%d] issueAddForbidden ", 403)
}

func (o *IssueAddForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewIssueAddServiceUnavailable creates a IssueAddServiceUnavailable with default headers values
func NewIssueAddServiceUnavailable() *IssueAddServiceUnavailable {
	return &IssueAddServiceUnavailable{}
}

/*
IssueAddServiceUnavailable describes a response with status code 503, with default header values.

Mantis Offline
*/
type IssueAddServiceUnavailable struct {
}

// IsSuccess returns true when this issue add service unavailable response has a 2xx status code
func (o *IssueAddServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this issue add service unavailable response has a 3xx status code
func (o *IssueAddServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue add service unavailable response has a 4xx status code
func (o *IssueAddServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this issue add service unavailable response has a 5xx status code
func (o *IssueAddServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this issue add service unavailable response a status code equal to that given
func (o *IssueAddServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the issue add service unavailable response
func (o *IssueAddServiceUnavailable) Code() int {
	return 503
}

func (o *IssueAddServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /issues][%d] issueAddServiceUnavailable ", 503)
}

func (o *IssueAddServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /issues][%d] issueAddServiceUnavailable ", 503)
}

func (o *IssueAddServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
